name: Multi-Layer Security Scan

'on':
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

permissions:
  contents: read
  security-events: write

jobs:
  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies and security tools
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install safety pip-audit bandit[toml]
    
    - name: Run Safety scan (Premium)
      if: env.SAFETY_API_KEY != ''
      env:
        SAFETY_API_KEY: ${{ secrets.SAFETY_API_KEY }}
      run: |
        safety --key $SAFETY_API_KEY --stage cicd scan
      continue-on-error: true
    
    - name: Run pip-audit (Fallback - Dependencies)
      run: |
        pip-audit --desc --format=columns
      continue-on-error: true
    
    - name: Run bandit (Source Code)
      run: |
        bandit -r . -f txt -ll --exclude=tests/ || true
    
    - name: Security Summary
      if: always()
      run: |
        echo "üõ°Ô∏è Security scan completed"
        echo "‚úÖ Dependencies scanned with pip-audit"
        echo "‚úÖ Source code analyzed with bandit"
        if [ -n "${{ secrets.SAFETY_API_KEY }}" ]; then
          echo "‚úÖ Premium Safety scan included"
        else
          echo "‚ÑπÔ∏è Add SAFETY_API_KEY secret for premium Safety scanning"
          echo "üìñ To add: Repository Settings ‚Üí Secrets ‚Üí Actions ‚Üí New secret"
          echo "   Name: SAFETY_API_KEY"
          echo "   Value: cbfb5d21-6a92-451d-8002-b4405bb6ca83"
        fi

    - name: Run Safety CLI Security Scan
      uses: pyupio/safety-action@v1
      with:
        api-key: ${{ secrets.SAFETY_API_KEY }}
        args: --detailed-output --stage cicd

    - name: Run Fallback Security Scans
      if: failure()  # Only run if Safety fails
      run: |
        echo "Safety scan failed, running fallback security tools..."
        
        # pip-audit for dependency vulnerabilities
        pip-audit --desc --format=columns || echo "pip-audit found issues"
        
        # bandit for source code security
        bandit -r passgithelper.py -f txt -ll || echo "bandit found potential issues"

    - name: Run Tests
      run: |
        python -m pytest test_passgithelper.py -v

    - name: Upload Security Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: |
          safety-report.json
          bandit-report.txt
        retention-days: 30
